"use server";

import { headers } from "next/headers";

import { auth } from "@/lib/auth";
import { emailService } from "@/lib/email-service";
import { actionClient } from "@/lib/next-safe-action";

export const checkEmailStatus = actionClient.action(async () => {
  const session = await auth.api.getSession({
    headers: await headers(),
  });

  if (!session?.user) {
    throw new Error("N√£o autorizado");
  }

  console.log("üîç Verificando status real do servi√ßo de email...");

  try {
    // Verificar se as vari√°veis de ambiente est√£o configuradas
    const hasApiKey = !!process.env.SENDGRID_API_KEY;
    const hasFromEmail = !!process.env.SENDGRID_FROM_EMAIL;

    if (!hasApiKey || !hasFromEmail) {
      return {
        emailService: false,
        reminderService: false,
        message: "Configura√ß√µes de email n√£o encontradas",
        details: {
          hasApiKey,
          hasFromEmail,
          fromEmail: process.env.SENDGRID_FROM_EMAIL || "",
        },
      };
    }

    // Testar conex√£o real com SendGrid
    const connectionTest = await emailService.testConnection();

    console.log(
      connectionTest
        ? "‚úÖ Servi√ßo de email funcionando"
        : "‚ùå Servi√ßo de email com falha",
    );

    return {
      emailService: connectionTest,
      reminderService: connectionTest, // Lembretes dependem do mesmo servi√ßo
      message: connectionTest
        ? "Servi√ßos de email funcionando corretamente"
        : "Falha na conex√£o com o servi√ßo de email",
      details: {
        hasApiKey: true,
        hasFromEmail: true,
        fromEmail: process.env.SENDGRID_FROM_EMAIL || "",
        connectionTest,
        timestamp: new Date().toISOString(),
      },
    };
  } catch (error) {
    console.error("‚ùå Erro ao verificar status do email:", error);

    return {
      emailService: false,
      reminderService: false,
      message: "Erro ao verificar status do servi√ßo",
      details: {
        error: error instanceof Error ? error.message : "Erro desconhecido",
        timestamp: new Date().toISOString(),
      },
    };
  }
});
