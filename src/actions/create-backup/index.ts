"use server";

import { eq } from "drizzle-orm";
import JSZip from "jszip";
import { headers } from "next/headers";

import { db } from "@/db";
import {
  appointmentsTable,
  clinicsTable,
  doctorsTable,
  medicalRecordsTable,
  patientsTable,
  securityConfigurationsTable,
  securityLogsTable,
} from "@/db/schema";
import { auth } from "@/lib/auth";
import { actionClient } from "@/lib/next-safe-action";

export const createBackup = actionClient.action(async () => {
  const session = await auth.api.getSession({
    headers: await headers(),
  });

  if (!session?.user) {
    throw new Error("Unauthorized");
  }

  if (!session?.user.clinic?.id) {
    throw new Error("Clinic not found");
  }

  console.log(
    `üíæ Criando backup compactado dos dados da cl√≠nica: ${session.user.clinic.id}`,
  );

  try {
    // Buscar todos os dados da cl√≠nica
    const [
      clinic,
      doctors,
      patients,
      appointments,
      medicalRecords,
      securityConfiguration,
      securityLogs,
    ] = await Promise.all([
      // Dados da cl√≠nica (sem dados sens√≠veis de outras cl√≠nicas)
      db.query.clinicsTable.findFirst({
        where: eq(clinicsTable.id, session.user.clinic.id),
      }),

      // M√©dicos
      db.query.doctorsTable.findMany({
        where: eq(doctorsTable.clinicId, session.user.clinic.id),
        with: {
          user: {
            columns: {
              id: true,
              name: true,
              email: true,
              userType: true,
              createdAt: true,
            },
          },
        },
      }),

      // Pacientes (dados pessoais conforme LGPD)
      db.query.patientsTable.findMany({
        where: eq(patientsTable.clinicId, session.user.clinic.id),
      }),

      // Agendamentos
      db.query.appointmentsTable.findMany({
        where: eq(appointmentsTable.clinicId, session.user.clinic.id),
      }),

      // Prontu√°rios m√©dicos (dados sens√≠veis conforme LGPD)
      db.query.medicalRecordsTable.findMany({
        where: eq(medicalRecordsTable.clinicId, session.user.clinic.id),
      }),

      // Configura√ß√µes de seguran√ßa
      db.query.securityConfigurationsTable.findFirst({
        where: eq(securityConfigurationsTable.clinicId, session.user.clinic.id),
      }),

      // Logs de seguran√ßa (√∫ltimos 90 dias por padr√£o)
      db.query.securityLogsTable.findMany({
        where: eq(securityLogsTable.clinicId, session.user.clinic.id),
        orderBy: (logs, { desc }) => [desc(logs.createdAt)],
        limit: 1000, // Limitar logs para n√£o gerar arquivos muito grandes
      }),
    ]);

    // Estrutura do backup seguindo boas pr√°ticas de LGPD
    const backupData = {
      metadata: {
        clinicId: session.user.clinic.id,
        clinicName: clinic?.name,
        backupDate: new Date().toISOString(),
        createdBy: {
          userId: session.user.id,
          userName: session.user.name,
          userEmail: session.user.email,
        },
        version: "1.0",
        description: "Backup completo dos dados da cl√≠nica conforme LGPD",
        dataClassification: "CONFIDENCIAL - Dados Pessoais e Sens√≠veis",
        retentionPolicy: "Conforme configura√ß√£o da cl√≠nica",
        compression: "ZIP - Compacta√ß√£o para otimiza√ß√£o de espa√ßo",
        lgpdCompliance: {
          dataMinimization: "Apenas dados da cl√≠nica espec√≠fica",
          purposeLimitation: "Backup e recupera√ß√£o de dados",
          accuracyPrinciple: "Dados atuais no momento do backup",
          storageLimitation: "Sujeito √†s pol√≠ticas de reten√ß√£o",
          integrityConfidentiality: "Dados estruturados, seguros e compactados",
          accountability: `Backup realizado por ${session.user.name}`,
        },
      },

      // Dados da cl√≠nica
      clinic: clinic
        ? {
            ...clinic,
            // Remover dados sens√≠veis desnecess√°rios se houver
          }
        : null,

      // Dados dos m√©dicos
      doctors: doctors.map((doctor) => ({
        ...doctor,
        // Manter dados necess√°rios para restaura√ß√£o
      })),

      // Dados dos pacientes (dados pessoais - LGPD Art. 5¬∫, I)
      patients: patients.map((patient) => ({
        ...patient,
        // Todos os dados s√£o necess√°rios para continuidade do atendimento
        lgpdNote:
          "Dados pessoais necess√°rios para presta√ß√£o de servi√ßos de sa√∫de",
      })),

      // Agendamentos
      appointments: appointments.map((appointment) => ({
        ...appointment,
      })),

      // Prontu√°rios m√©dicos (dados sens√≠veis - LGPD Art. 5¬∫, II)
      medicalRecords: medicalRecords.map((record) => ({
        ...record,
        lgpdNote:
          "Dados sens√≠veis sobre sa√∫de - base legal: presta√ß√£o de servi√ßos de sa√∫de",
      })),

      // Configura√ß√µes de seguran√ßa
      securityConfiguration: securityConfiguration
        ? {
            ...securityConfiguration,
          }
        : null,

      // Logs de seguran√ßa (para auditoria)
      securityLogs: securityLogs.map((log) => ({
        ...log,
        lgpdNote: "Log de auditoria para compliance e seguran√ßa",
      })),

      // Estat√≠sticas do backup
      statistics: {
        totalDoctors: doctors.length,
        totalPatients: patients.length,
        totalAppointments: appointments.length,
        totalMedicalRecords: medicalRecords.length,
        totalSecurityLogs: securityLogs.length,
      },
    };

    // Criar arquivo ZIP com os dados
    const zip = new JSZip();

    // Adicionar arquivo principal do backup
    const backupJson = JSON.stringify(backupData, null, 2);
    zip.file("backup-data.json", backupJson);

    // Adicionar arquivo README com instru√ß√µes
    const readmeContent = `
# Backup da Cl√≠nica ${clinic?.name || "Desconhecida"}
Data do Backup: ${new Date().toLocaleString("pt-BR")}
Realizado por: ${session.user.name}

## Conformidade LGPD
Este backup cont√©m dados pessoais e sens√≠veis conforme a Lei Geral de Prote√ß√£o de Dados Pessoais (LGPD).

### Dados Inclu√≠dos:
- Dados da cl√≠nica
- M√©dicos e usu√°rios (${doctors.length} registros)
- Pacientes - dados pessoais (${patients.length} registros)
- Agendamentos (${appointments.length} registros)
- Prontu√°rios m√©dicos - dados sens√≠veis (${medicalRecords.length} registros)
- Configura√ß√µes de seguran√ßa
- Logs de auditoria (${securityLogs.length} registros)

### Instru√ß√µes de Seguran√ßa:
1. Mantenha este arquivo em local seguro
2. N√£o compartilhe com terceiros n√£o autorizados
3. Considere criptografar este arquivo
4. Exclua backups antigos conforme pol√≠tica de reten√ß√£o
5. Este backup s√≥ pode ser restaurado na cl√≠nica de origem

### Para Restaurar:
1. Acesse o sistema Doutor Agenda
2. V√° em Configura√ß√µes > Backup e Dados
3. Clique em "Restaurar"
4. Selecione este arquivo ZIP
5. Confirme a opera√ß√£o

Cl√≠nica ID: ${session.user.clinic.id}
Vers√£o do Backup: 1.0
Compacta√ß√£o: ZIP
`.trim();

    zip.file("LEIA-ME.txt", readmeContent);

    // Gerar o arquivo ZIP como buffer
    const zipBuffer = await zip.generateAsync({
      type: "nodebuffer",
      compression: "DEFLATE",
      compressionOptions: {
        level: 9, // M√°xima compress√£o
      },
    });

    // Calcular tamanhos para estat√≠sticas
    const originalSize = Buffer.byteLength(backupJson, "utf8");
    const compressedSize = zipBuffer.length;
    const compressionRatio = (
      ((originalSize - compressedSize) / originalSize) *
      100
    ).toFixed(1);

    // Registrar log do backup
    await db.insert(securityLogsTable).values({
      clinicId: session.user.clinic.id,
      userId: session.user.id,
      type: "data_export",
      action: "Backup compactado dos dados da cl√≠nica criado",
      details: JSON.stringify({
        originalSize: `${(originalSize / 1024).toFixed(1)} KB`,
        compressedSize: `${(compressedSize / 1024).toFixed(1)} KB`,
        compressionRatio: `${compressionRatio}%`,
        format: "ZIP",
        tablesIncluded: [
          "clinic",
          "doctors",
          "patients",
          "appointments",
          "medicalRecords",
          "securityConfiguration",
          "securityLogs",
        ],
        totalRecords:
          backupData.statistics.totalDoctors +
          backupData.statistics.totalPatients +
          backupData.statistics.totalAppointments +
          backupData.statistics.totalMedicalRecords,
        lgpdCompliance: true,
        timestamp: new Date().toISOString(),
      }),
      success: true,
    });

    console.log("‚úÖ Backup compactado criado com sucesso");
    console.log(`üìä Estat√≠sticas: ${JSON.stringify(backupData.statistics)}`);
    console.log(
      `üì¶ Compress√£o: ${originalSize} bytes ‚Üí ${compressedSize} bytes (${compressionRatio}% redu√ß√£o)`,
    );

    return {
      success: true,
      backup: zipBuffer.toString('base64'),
      filename: `backup-${clinic?.name?.replace(/[^a-zA-Z0-9]/g, "-")}-${new Date().toISOString().split("T")[0]}.zip`,
      statistics: {
        ...backupData.statistics,
        originalSize: `${(originalSize / 1024).toFixed(1)} KB`,
        compressedSize: `${(compressedSize / 1024).toFixed(1)} KB`,
        compressionRatio: `${compressionRatio}%`,
      },
    };
  } catch (error) {
    console.error("‚ùå Erro ao criar backup:", error);

    // Registrar log de erro
    try {
      await db.insert(securityLogsTable).values({
        clinicId: session.user.clinic.id,
        userId: session.user.id,
        type: "data_export",
        action: "Falha ao criar backup compactado dos dados",
        details: JSON.stringify({
          error: error instanceof Error ? error.message : "Erro desconhecido",
          timestamp: new Date().toISOString(),
        }),
        success: false,
      });
    } catch (logError) {
      console.error("‚ùå Erro ao registrar log de erro:", logError);
    }

    throw new Error(
      `Falha ao criar backup: ${error instanceof Error ? error.message : "Erro desconhecido"}`,
    );
  }
});
