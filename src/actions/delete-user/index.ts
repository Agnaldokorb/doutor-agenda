"use server";

import { eq } from "drizzle-orm";
import { revalidatePath } from "next/cache";
import { headers } from "next/headers";
import { z } from "zod";

import { db } from "@/db";
import {
  appointmentsTable,
  doctorsTable,
  usersTable,
  usersToClinicsTable,
} from "@/db/schema";
import { auth } from "@/lib/auth";
import { actionClient } from "@/lib/next-safe-action";

const deleteUserSchema = z.object({
  userId: z.string().min(1, "ID do usu√°rio √© obrigat√≥rio"),
});

export const deleteUser = actionClient
  .schema(deleteUserSchema)
  .action(async ({ parsedInput }) => {
    const session = await auth.api.getSession({
      headers: await headers(),
    });

    if (!session?.user) {
      throw new Error("N√£o autorizado");
    }

    if (session.user.userType !== "admin") {
      throw new Error("Apenas administradores podem excluir usu√°rios");
    }

    const clinicId = session.user.clinic?.id;
    if (!clinicId) {
      throw new Error("Usu√°rio n√£o est√° associado a uma cl√≠nica");
    }

    // N√£o permitir que o usu√°rio delete a si mesmo
    if (parsedInput.userId === session.user.id) {
      throw new Error("Voc√™ n√£o pode excluir sua pr√≥pria conta");
    }

    try {
      console.log(`üóëÔ∏è Iniciando exclus√£o do usu√°rio: ${parsedInput.userId}`);

      // 1. Buscar informa√ß√µes do usu√°rio
      const user = await db.query.usersTable.findFirst({
        where: eq(usersTable.id, parsedInput.userId),
      });

      if (!user) {
        throw new Error("Usu√°rio n√£o encontrado");
      }

      console.log(
        `üë§ Usu√°rio encontrado: ${user.name} (${user.email}) - Tipo: ${user.userType}`,
      );

      // 2. Verificar se o usu√°rio pertence √† mesma cl√≠nica
      const userClinicAssociation =
        await db.query.usersToClinicsTable.findFirst({
          where: eq(usersToClinicsTable.userId, parsedInput.userId),
        });

      if (
        !userClinicAssociation ||
        userClinicAssociation.clinicId !== clinicId
      ) {
        throw new Error("Usu√°rio n√£o pertence a esta cl√≠nica");
      }

      // 3. Se for m√©dico, remover consultas associadas primeiro
      if (user.userType === "doctor") {
        console.log("üë®‚Äç‚öïÔ∏è Usu√°rio √© m√©dico, buscando dados do m√©dico...");

        const doctor = await db.query.doctorsTable.findFirst({
          where: eq(doctorsTable.userId, parsedInput.userId),
        });

        if (doctor) {
          console.log(
            `üè• M√©dico encontrado: ${doctor.name} - Removendo consultas...`,
          );

          // Deletar todas as consultas do m√©dico
          const deletedAppointments = await db
            .delete(appointmentsTable)
            .where(eq(appointmentsTable.doctorId, doctor.id))
            .returning();

          console.log(`üìÖ ${deletedAppointments.length} consultas removidas`);

          // Deletar o registro do m√©dico
          await db.delete(doctorsTable).where(eq(doctorsTable.id, doctor.id));

          console.log("üë®‚Äç‚öïÔ∏è Registro de m√©dico removido");
        }
      }

      // 4. Remover associa√ß√£o usu√°rio-cl√≠nica
      await db
        .delete(usersToClinicsTable)
        .where(eq(usersToClinicsTable.userId, parsedInput.userId));

      console.log("üîó Associa√ß√£o usu√°rio-cl√≠nica removida");

      // 5. Deletar o usu√°rio (isso tamb√©m remove sess√µes, contas, etc. via cascade)
      await db.delete(usersTable).where(eq(usersTable.id, parsedInput.userId));

      console.log(`‚úÖ Usu√°rio ${user.name} deletado com sucesso`);

      revalidatePath("/configurations");
      revalidatePath("/doctors");
      revalidatePath("/appointments");

      return {
        success: true,
        message: `Usu√°rio ${user.name} foi exclu√≠do com sucesso`,
        deletedAppointments: user.userType === "doctor",
      };
    } catch (error) {
      console.error("‚ùå Erro ao deletar usu√°rio:", error);
      throw new Error(
        error instanceof Error
          ? `Erro ao excluir usu√°rio: ${error.message}`
          : "Erro desconhecido ao excluir usu√°rio",
      );
    }
  });
